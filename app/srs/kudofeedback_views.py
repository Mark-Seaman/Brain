# srs/views_dt.py
# KudoFeedback views for basic operations


#############################################################################
# DO NOT EDIT THIS FILE
# This Code will be replaced by the code generator
#############################################################################

from django.views.generic import ListView, DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.core.urlresolvers import reverse_lazy
from django.contrib.auth.decorators import login_required

from models import KudoFeedback
from kudofeedback import query_kudofeedback, get_kudofeedback


# Basic list view with using a template
class KudoFeedbackList(ListView):
    model = KudoFeedback
    template_name = 'kudofeedback_list.html'

    # Filter the list of choices
    queryset = query_kudofeedback()

    # Use the request user to match the items
    #def get_queryset(self):
    #    return KudoFeedback.objects.filter(name=self.request.user.username)


# Basic detail view
class KudoFeedbackDetail(DetailView):
    model = KudoFeedback
    template_name = 'kudofeedback_detail.html'

    # Call the base implementation first to get a context
    def get_context_data(self, **kwargs):
        context = super(KudoFeedbackDetail, self).get_context_data(**kwargs)
        id = context['object'].pk
        context['value_list'] = get_kudofeedback(self.request.user,id)
        return context


# Create view
class KudoFeedbackAdd(CreateView):
    model = KudoFeedback
    template_name = 'kudofeedback_edit.html'


# Update view
#@login_required(login_url='/login')
class KudoFeedbackEdit(UpdateView):
    model = KudoFeedback
    template_name = 'kudofeedback_edit.html'


# Delete view
class KudoFeedbackDelete(DeleteView):
    model = KudoFeedback
    success_url = reverse_lazy('kudofeedback_list')
    template_name = 'kudofeedback_delete.html'

